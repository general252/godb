package model

// 此文件是更加GoGoBean自动生成

import (
    "github.com/general252/gout/uerror"
    "gorm.io/gorm"
    "time"
)

type bean{{.GoStructName}} struct {
    obj *{{.GoStructName}}
    db  *gorm.DB
}

type Bean{{.GoStructName}}Option func(*bean{{.GoStructName}})

func With{{.GoStructName}}DB(db *gorm.DB) Bean{{.GoStructName}}Option {
    return func(c *bean{{.GoStructName}}) {
        c.db = db
    }
}

func NewBean{{.GoStructName}}(opts ...Bean{{.GoStructName}}Option) *bean{{.GoStructName}} {
    c := &bean{{.GoStructName}}{
        obj: new({{.GoStructName}}),
    }

    for _, opt := range opts {
        opt(c)
    }

    if c.db == nil {
        // 使用默认的
        c.db = DefaultEngine.GetDB()
    }

    return c
}

func (c *bean{{.GoStructName}}) Add(m *{{.GoStructName}}) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }

    if m == nil {
        return nil, uerror.WithMessage("[{{.GoStructName}}] param is nil")
    }

    m.CreatedAt = Time(time.Now().UTC())

    if r := c.db.Model(c.obj).Create(m); r.Error != nil {
        return nil, uerror.WithError(r.Error)
    } else if r.RowsAffected != 1 {
        return nil, uerror.WithMessageF("[{{.GoStructName}}] add affected row %v", r.RowsAffected)
    }

    return m, nil
}

func (c *bean{{.GoStructName}}) GetByKeyId(keyId uint) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&{{.GoStructName}}{
        Model: Model{
            ID: keyId,
        },
    }).First(&m)
    if r.Error != nil {
        return nil, uerror.WithError(r.Error)
    }
    if m.ID != keyId {
        return nil, uerror.WithMessageF("[{{.GoStructName}}] get fail. param: %v, get: %v", keyId, m.ID)
    }

    return &m, nil
}

func (c *bean{{.GoStructName}}) GetUid(uid string) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }

    if len(uid) == 0 {
        return nil, uerror.WithMessage("[{{.GoStructName}}] error param uid")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&{{.GoStructName}}{
        Model: Model{
            Uid: String(uid),
        },
    }).First(&m)
    if r.Error != nil {
        return nil, uerror.WithError(r.Error)
    }
    if PointString(m.Uid) != uid {
        return nil, uerror.WithMessageF("[{{.GoStructName}}] get beanBook fail. param: %v, get: %v", uid, m.Uid)
    }

    return &m, nil
}

func (c *bean{{.GoStructName}}) UpdateByKeyId(obj *{{.GoStructName}}) error {
    if c.db == nil {
        return uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }
    if obj == nil || obj.ID == 0 {
        return uerror.WithMessage("[{{.GoStructName}}] param error")
    }

    obj.UpdatedAt = Time(time.Now().UTC())

    r := c.db.Model(c.obj).Where(&{{.GoStructName}}{
        Model: Model{
            ID: obj.ID,
        },
    }).Updates(obj)
    if r.Error != nil {
        return uerror.WithError(r.Error)
    }

    return nil
}

func (c *bean{{.GoStructName}}) UpdateByUId(obj *{{.GoStructName}}) error {
    if c.db == nil {
        return uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }
    if obj == nil || len(PointString(obj.Uid)) == 0 {
        return uerror.WithMessage("[{{.GoStructName}}] param error")
    }

    obj.UpdatedAt = Time(time.Now().UTC())

    r := c.db.Model(c.obj).Where(&{{.GoStructName}}{
        Model: Model{
            Uid: obj.Uid,
        },
    }).Updates(obj)
    if r.Error != nil {
        return uerror.WithError(r.Error)
    }

    return nil
}

func (c *bean{{.GoStructName}}) DeleteByKeyId(keyId uint) error {
    if c.db == nil {
        return uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }

    if keyId == 0 {
        return uerror.WithMessage("[{{.GoStructName}}] key id is 0")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&{{.GoStructName}}{
        Model: Model{
            ID: keyId,
        },
    }).Delete(&m)
    if r.Error != nil {
        return uerror.WithError(r.Error)
    }

    if r.RowsAffected != 1 {
        return uerror.WithMessageF("[{{.GoStructName}}] delete row affected %v", r.RowsAffected)
    }

    return nil
}

func (c *bean{{.GoStructName}}) DeleteByUId(uid string) error {
    if c.db == nil {
        return uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }

    if len(uid) == 0 {
        return uerror.WithMessage("[{{.GoStructName}}] uid error")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&{{.GoStructName}}{
        Model: Model{
            Uid: String(uid),
        },
    }).Delete(&m)
    if r.Error != nil {
        return uerror.WithError(r.Error)
    }

    if r.RowsAffected != 1 {
        return uerror.WithMessageF("[{{.GoStructName}}] delete row affected %v", r.RowsAffected)
    }

    return nil
}

type Bean{{.GoStructName}}DBOption func(r *gorm.DB, field *Go{{.GoStructName}}) *gorm.DB

func (c *bean{{.GoStructName}}) Filter(filter *{{.GoStructName}}, limit int, offset int, customFilters ...Bean{{.GoStructName}}DBOption) ([]{{.GoStructName}}, int64, error) {
    if c.db == nil {
        return nil, -1, uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }

    var funFilter = func() *gorm.DB {
        r := c.db.Model(c.obj)

        if filter != nil {
            r = r.Where(filter)
        }

        if len(customFilters) > 0 {
            var field = newGo{{.GoStructName}}()
            for _, filter := range customFilters {
                r = filter(r, field)
            }
        }

        return r
    }

    var m []{{.GoStructName}}
    if r := funFilter().Offset(offset).Limit(limit).Find(&m); r.Error != nil {
        return nil, -1, uerror.WithError(r.Error)
    }

    var totalCount int64
    if r := funFilter().Count(&totalCount); r.Error != nil {
        return nil, -1, uerror.WithError(r.Error)
    }

    return m, totalCount, nil
}

func (c *bean{{.GoStructName}}) Find(filter *{{.GoStructName}}, limit int, offset int, customFilters ...Bean{{.GoStructName}}DBOption) ([]{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, uerror.WithMessage("[{{.GoStructName}}] db is nil")
    }

    var funFilter = func() *gorm.DB {
        r := c.db.Model(c.obj)

        if filter != nil {
            r = r.Where(filter)
        }

        if len(customFilters) > 0 {
            var field = newGo{{.GoStructName}}()
            for _, filter := range customFilters {
                r = filter(r, field)
            }
        }

        return r
    }

    var m []{{.GoStructName}}
    if r := funFilter().Offset(offset).Limit(limit).Find(&m); r.Error != nil {
        return nil, uerror.WithError(r.Error)
    }

    return m, nil
}
