package model

// 此文件是更加GoGoBean自动生成

import (
    "time"

    "github.com/pkg/errors"
    "gorm.io/gorm"
    "gorm.io/gorm/clause"

    "github.com/general252/godb/godb"
)

type bean{{.GoStructName}} struct {
    obj *{{.GoStructName}}
    db  *gorm.DB
}

type Bean{{.GoStructName}}Option func(*bean{{.GoStructName}})

// With{{.GoStructName}}DB 设置DB
func With{{.GoStructName}}DB(db *gorm.DB) Bean{{.GoStructName}}Option {
    return func(c *bean{{.GoStructName}}) {
        c.db = db
    }
}

// NewBean{{.GoStructName}} 创建{{.GoStructName}}辅助
func NewBean{{.GoStructName}}(opts ...Bean{{.GoStructName}}Option) *bean{{.GoStructName}} {
    c := &bean{{.GoStructName}}{
        obj: new({{.GoStructName}}),
    }

    for _, opt := range opts {
        opt(c)
    }

    if c.db == nil {
        // 使用默认的
        c.db = DefaultEngine.GetDB()
    }

    return c
}

// Add 添加一条{{.GoStructName}}记录
func (c *bean{{.GoStructName}}) Add(m *{{.GoStructName}}) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, errors.New("[{{.GoStructName}}] db is nil")
    }

    if m == nil {
        return nil, errors.New("[{{.GoStructName}}] param is nil")
    }

    m.CreatedAt = godb.Time(time.Now().UTC())

    if r := c.db.Model(c.obj).Create(m); r.Error != nil {
        return nil, errors.WithStack(r.Error)
    } else if r.RowsAffected != 1 {
        return nil, errors.Errorf("[{{.GoStructName}}] add affected row %v", r.RowsAffected)
    }

    return m, nil
}

// GetByKeyId 根据keyId获取{{.GoStructName}}
func (c *bean{{.GoStructName}}) GetByKeyId(keyId uint) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, errors.New("[{{.GoStructName}}] db is nil")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&
        {{.GoStructName}}{
    Model:
        godb.Model{
            ID: keyId,
        },
    }).First(&m)
    if r.Error != nil {
        return nil, errors.WithStack(r.Error)
    }
    if m.ID != keyId {
        return nil, errors.Errorf("[{{.GoStructName}}] get fail. param: %v, get: %v", keyId, m.ID)
    }

    return &m, nil
}

// GetUid 根据uid获取{{.GoStructName}}
func (c *bean{{.GoStructName}}) GetUid(uid string) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, errors.New("[{{.GoStructName}}] db is nil")
    }

    if len(uid) == 0 {
        return nil, errors.New("[{{.GoStructName}}] error param uid")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&
        {{.GoStructName}}{
    Model:
        godb.Model{
            Uid: godb.String(uid),
        },
    }).First(&m)
    if r.Error != nil {
        return nil, errors.WithStack(r.Error)
    }
    if godb.PointString(m.Uid) != uid {
        return nil, errors.Errorf("[{{.GoStructName}}] get beanBook fail. param: %v, get: %v", uid, m.Uid)
    }

    return &m, nil
}

// UpdateByKeyId 根据keyId修改{{.GoStructName}}
func (c *bean{{.GoStructName}}) UpdateByKeyId(obj *{{.GoStructName}}) error {
    if c.db == nil {
        return errors.New("[{{.GoStructName}}] db is nil")
    }
    if obj == nil || obj.ID == 0 {
        return errors.New("[{{.GoStructName}}] param error")
    }

    obj.UpdatedAt = godb.Time(time.Now().UTC())

    r := c.db.Model(c.obj).Where(&
        {{.GoStructName}}{
    Model:
        godb.Model{
            ID: obj.ID,
        },
    }).Updates(obj)
    if r.Error != nil {
        return errors.WithStack(r.Error)
    }

    return nil
}

// UpdateByUId 根据uid修改{{.GoStructName}}
func (c *bean{{.GoStructName}}) UpdateByUId(obj *{{.GoStructName}}) error {
    if c.db == nil {
        return errors.New("[{{.GoStructName}}] db is nil")
    }
    if obj == nil || len(godb.PointString(obj.Uid)) == 0 {
        return errors.New("[{{.GoStructName}}] param error")
    }

    obj.UpdatedAt = godb.Time(time.Now().UTC())

    r := c.db.Model(c.obj).Where(&
        {{.GoStructName}}{
    Model:
        godb.Model{
            Uid: obj.Uid,
        },
    }).Updates(obj)
    if r.Error != nil {
        return errors.WithStack(r.Error)
    }

    return nil
}


// Update 根据自定义条件更新{{.GoStructName}}
func (c *bean{{.GoStructName}}) Update(m *{{.GoStructName}}, customFilters ...Bean{{.GoStructName}}DBOption) (int64, error) {
    if c.db == nil {
        return -1, errors.New("[{{.GoStructName}}] db is nil")
    }
    if len(customFilters) == 0 {
        return -1, errors.New("[{{.GoStructName}}] param error")
    }

    var (
        err error
        r   =  c.db.Model(c.obj)
    )

    var field = newGo{{.GoStructName}}()
    for _, filter := range customFilters {
        if r, err = filter(r, field); err!=nil {
            return -1, err
        }
    }

    r = r.Updates(m)
    if r.Error != nil {
        return -1, errors.WithStack(r.Error)
    }

    return r.RowsAffected, nil
}

// DeleteByKeyId 根据keyId删除{{.GoStructName}}
func (c *bean{{.GoStructName}}) DeleteByKeyId(keyId uint) error {
    if c.db == nil {
        return errors.New("[{{.GoStructName}}] db is nil")
    }

    if keyId == 0 {
        return errors.New("[{{.GoStructName}}] key id is 0")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&
        {{.GoStructName}}{
    Model:
        godb.Model{
            ID: keyId,
        },
    }).Delete(&m)
    if r.Error != nil {
        return errors.WithStack(r.Error)
    }

    if r.RowsAffected != 1 {
        return errors.Errorf("[{{.GoStructName}}] delete row affected %v", r.RowsAffected)
    }

    return nil
}

// DeleteByUId 根据uid删除{{.GoStructName}}
func (c *bean{{.GoStructName}}) DeleteByUId(uid string) error {
    if c.db == nil {
        return errors.New("[{{.GoStructName}}] db is nil")
    }

    if len(uid) == 0 {
        return errors.New("[{{.GoStructName}}] uid error")
    }

    var m {{.GoStructName}}
    r := c.db.Model(c.obj).Where(&
        {{.GoStructName}}{
    Model:
        godb.Model{
            Uid: godb.String(uid),
        },
    }).Delete(&m)
    if r.Error != nil {
        return errors.WithStack(r.Error)
    }

    if r.RowsAffected != 1 {
        return errors.Errorf("[{{.GoStructName}}] delete row affected %v", r.RowsAffected)
    }

    return nil
}

// Delete 根据自定义条件删除{{.GoStructName}}
func (c *bean{{.GoStructName}}) Delete(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) (int64, error) {
    if c.db == nil {
        return -1, errors.New("[{{.GoStructName}}] db is nil")
    }
    if len(customFilters) == 0 {
        return -1, errors.New("[{{.GoStructName}}] param error")
    }

	var (
		err error
	    m {{.GoStructName}}
		r = c.db.Model(c.obj)
	)

	if filter != nil {
        r, err = c.funFilter(filter, customFilters...)
        if err != nil {
            return -1, err
        }
    }

    var field = newGo{{.GoStructName}}()
    for _, filterFn := range customFilters {
        if r, err = filterFn(r, field); err!=nil{
            return -1, err
        }
    }

    r = r.Delete(&m)
    if r.Error != nil {
        return -1, errors.WithStack(r.Error)
    }

    return r.RowsAffected, nil
}

type Bean{{.GoStructName}}DBOption func(r *gorm.DB, field *Go{{.GoStructName}}) (*gorm.DB, error)

type {{.GoStructName}}Filter struct {
    Limit  int
    Offset int
    Object *{{.GoStructName}} // 完全匹配
    Match  *{{.GoStructName}} // 模糊匹配, 仅string类型字段有效, 推荐使用 Cond.Like
    MatchString *string // 模糊匹配所有string类型字段
    Cond *{{.GoStructName}}FilterCond //
}

// Filter 筛选{{.GoStructName}}
func (c *bean{{.GoStructName}}) Filter(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) ([]{{.GoStructName}}, int64, error) {
    if c.db == nil {
        return nil, -1, errors.New("[{{.GoStructName}}] db is nil")
    }

    var limit = 0
    var offset = 0
    if filter != nil {
        limit = filter.Limit
        offset = filter.Offset
    }
    if limit < 0 {
        return nil, -1, errors.New("[{{.GoStructName}}] limit error")
    }
    if offset < 0 {
        return nil, -1, errors.New("[{{.GoStructName}}] offset error")
    }

    var m []{{.GoStructName}}
    r, err := c.funFilter(filter, customFilters...)
    if err != nil {
        return nil, -1, err
    }
    r = r.Offset(offset)
    if limit > 0 {
        r = r.Limit(limit)
    }
    if r.Find(&m); r.Error != nil {
        return nil, -1, errors.WithStack(r.Error)
    }

    var totalCount int64
    {
        r, err := c.funFilter(filter, customFilters...)
        if err != nil {
            return nil, -1, err
        }
        if r := r.Count(&totalCount); r.Error != nil {
            return nil, -1, errors.WithStack(r.Error)
        }
    }

    return m, totalCount, nil
}

// Find 查找{{.GoStructName}}, matchObject: 仅string类型字段有效
func (c *bean{{.GoStructName}}) Find(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) ([]{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, errors.New("[{{.GoStructName}}] db is nil")
    }

    var limit = 0
    var offset = 0
    if filter != nil {
        limit = filter.Limit
        offset = filter.Offset
    }
    if limit < 0 {
        return nil, errors.New("[{{.GoStructName}}] limit error")
    }
    if offset < 0 {
        return nil, errors.New("[{{.GoStructName}}] offset error")
    }

    var m []{{.GoStructName}}
    r, err := c.funFilter(filter, customFilters...)
    if err != nil {
        return nil, err
    }
    r = r.Offset(offset)
    if limit > 0 {
        r = r.Limit(limit)
    }
    if r.Find(&m); r.Error != nil {
        return nil, errors.WithStack(r.Error)
    }

    return m, nil
}


// FindToDB 查找{{.GoStructName}}, matchObject: 仅string类型字段有效
// subQuery, _ := FindToDB(***, func(***) {
//     r = r.Select(field.FieldName***())
// })
// r = r.Where(field.FieldNameXXXUid() + " IN (?)", subQuery)
func (c *bean{{.GoStructName}}) FindToDB(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) (*gorm.DB, error) {
    if c.db == nil {
        return nil, errors.New("[{{.GoStructName}}] db is nil")
    }

    var limit = 0
    var offset = 0
    if filter != nil {
        limit = filter.Limit
        offset = filter.Offset
    }
    if limit < 0 {
        return nil, errors.New("[{{.GoStructName}}] limit error")
    }
    if offset < 0 {
        return nil, errors.New("[{{.GoStructName}}] offset error")
    }

	r, err := c.funFilter(filter, customFilters...)
	if err != nil {
		return nil, err
	}

	r = r.Offset(offset)
    if limit > 0 {
        r = r.Limit(limit)
    }

    return r, nil
}

// FindAndRange 查找{{.GoStructName}}, matchObject: 仅string类型字段有效
func (c *bean{{.GoStructName}}) FindAndRange(fun func(*{{.GoStructName}}) bool, filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) error {
    if c.db == nil {
        return errors.New("[{{.GoStructName}}] db is nil")
    }
    if fun == nil {
        return errors.New("[{{.GoStructName}}] param error")
    }

    var limit = 0
    var offset = 0
    if filter != nil {
        limit = filter.Limit
        offset = filter.Offset
    }
    if limit < 0 {
        return errors.New("[{{.GoStructName}}] limit error")
    }
    if offset < 0 {
        return errors.New("[{{.GoStructName}}] offset error")
    }

	r, err := c.funFilter(filter, customFilters...)
	if err != nil {
		return err
	}
    r = r.Offset(offset)
    if limit > 0 {
        r = r.Limit(limit)
    }

    rows, err := r.Rows()
    if err != nil {
        return errors.WithStack(err)
    }
    defer rows.Close()

    for rows.Next() {
        var object {{.GoStructName}}
        if err := r.ScanRows(rows, &object); err != nil {
            return errors.WithStack(err)
        }

        if fun(&object) {
            continue
        } else {
            break
        }
    }

    return nil
}

// First {{.GoStructName}}, matchObject: 仅string类型字段有效
func (c *bean{{.GoStructName}}) First(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, errors.New("[{{.GoStructName}}] db is nil")
    }

    var offset = 0
    if filter != nil {
        offset = filter.Offset
    }
    if offset < 0 {
        return nil, errors.New("[{{.GoStructName}}] offset error")
    }

    var m {{.GoStructName}}
    r, err := c.funFilter(filter, customFilters...)
    if err != nil {
        return nil, err
    }
    if r := r.Offset(offset).First(&m); r.Error != nil {
        return nil, errors.WithStack(r.Error)
    }

    return &m, nil
}

// Last {{.GoStructName}}, matchObject: 仅string类型字段有效
func (c *bean{{.GoStructName}}) Last(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) (*{{.GoStructName}}, error) {
    if c.db == nil {
        return nil, errors.New("[{{.GoStructName}}] db is nil")
    }

    var offset = 0
    if filter != nil {
        offset = filter.Offset
    }
    if offset < 0 {
        return nil, errors.New("[{{.GoStructName}}] offset error")
    }

    var m {{.GoStructName}}
    r, err := c.funFilter(filter, customFilters...)
    if err != nil {
        return nil, err
    }
    if r := r.Offset(offset).Last(&m); r.Error != nil {
        return nil, errors.WithStack(r.Error)
    }

    return &m, nil
}

// Has 判断是否存在 {{.GoStructName}}
func (c *bean{{.GoStructName}}) Has(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) (bool, error) {
    if c.db == nil {
        return false, errors.New("[{{.GoStructName}}] db is nil")
    }

    var totalCount int64
    r, err := c.funFilter(filter, customFilters...)
    if err != nil {
        return false, err
    }
    if r := r.Limit(1).Count(&totalCount); r.Error != nil {
        return false, errors.WithStack(r.Error)
    }

    if totalCount > 0 {
        return true, nil
    } else {
        return false, nil
    }
}

// Count 筛选数量 {{.GoStructName}}
func (c *bean{{.GoStructName}}) Count(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) (int64, error) {
    if c.db == nil {
        return -1, errors.New("[{{.GoStructName}}] db is nil")
    }

    var totalCount int64
    r, err := c.funFilter(filter, customFilters...)
    if err != nil {
        return 0, err
    }
    if r := r.Count(&totalCount); r.Error != nil {
        return -1, errors.WithStack(r.Error)
    }

    return totalCount, nil
}

func (c *bean{{.GoStructName}}) funFilter(filter *{{.GoStructName}}Filter, customFilters ...Bean{{.GoStructName}}DBOption) (*gorm.DB, error) {

    var (
        err error
        r = c.db.Model(c.obj)
        field = newGo{{.GoStructName}}()
    )

    if filter != nil {
        if filter.Object != nil {
            r = r.Where(filter.Object)
        }

        var match = filter.Match
        if match != nil {
            {{range .Fields}}
                {{if eq .GoType "string" }}
                    if match.{{.GoFieldName}} != nil {
                        r = r.Clauses(clause.Like{
                            Column: field.FieldName{{.GoFieldName}}(),
                            Value:  "%" + godb.PointString(match.{{.GoFieldName}}) + "%",
                        })
                    }
                {{end}}
            {{end}}
        }

        var matchStr = godb.PointString(filter.MatchString)
        if len(matchStr) > 0 {
            var exps []clause.Expression

            {{range .Fields}}
                {{if eq .GoType "string" }}
                    exps = append(exps, clause.Like{
                        Column: field.FieldName{{.GoFieldName}}(),
                        Value:  "%" + matchStr + "%",
                    })
                {{end}}
            {{end}}

            if len(exps) > 0 {
                e := clause.Or(exps...)
                r.Clauses(e)
            }
        }




        if filter.Cond != nil {
            cond := filter.Cond
            switch cond.Type {
            case CondTypeGt:
                if cond.Number != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "int" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "uint" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "float" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Number.{{.GoFieldName}} != nil {
                                r = r.Clauses(clause.Gt{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Value:  cond.Number.{{.GoFieldName}},
                                })
                            }
                        {{end}}
                    {{end}}
                }
            case CondTypeGte: // 大于等于, int
                if cond.Number != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "int" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "uint" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "float" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Number.{{.GoFieldName}} != nil {
                                r = r.Clauses(clause.Gte{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Value:  cond.Number.{{.GoFieldName}},
                                })
                            }
                        {{end}}
                    {{end}}
                }
            case CondTypeLt: // 小于, int
                if cond.Number != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "int" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "uint" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "float" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Number.{{.GoFieldName}} != nil {
                                r = r.Clauses(clause.Lt{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Value:  cond.Number.{{.GoFieldName}},
                                })
                            }
                        {{end}}
                    {{end}}
                }
            case CondTypeLte: // 小于等于, int
                if cond.Number != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "int" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "uint" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "float" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Number.{{.GoFieldName}} != nil {
                                r = r.Clauses(clause.Lte{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Value:  cond.Number.{{.GoFieldName}},
                                })
                            }
                        {{end}}
                    {{end}}
                }
            case CondTypeBetween: // 区间, int
                if cond.Between != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "int" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "uint" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "float" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Between.{{.GoFieldName}}LessVal != nil {
                                r = r.Clauses(clause.Gte{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Value:  cond.Between.{{.GoFieldName}}LessVal,
                                })
                            }

                            if cond.Between.{{.GoFieldName}}MoreVal != nil {
                                r = r.Clauses(clause.Lte{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Value:  cond.Between.{{.GoFieldName}}MoreVal,
                                })
                            }
                        {{end}}
                    {{end}}
                }
            case CondTypeIn: // in, 集合
                if cond.Container != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "int" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "uint" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "float" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Container.{{.GoFieldName}} != nil {
                                r = r.Clauses(clause.IN{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Values: []interface{}{cond.Container.{{.GoFieldName}} },
                                })
                            }
                        {{end}}
                    {{end}}
                }
            case CondTypeNotIn: // not in, 集合
                if cond.Container != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "int" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "uint" }}
                            {{$ok = 1}}
                        {{end}}
                        {{if eq .GoType "float" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Container.{{.GoFieldName}} != nil {
                                r = r.Clauses(clause.Not(
                                    clause.IN{
                                        Column: field.FieldName{{.GoFieldName}}(),
                                        Values: []interface{}{   cond.Container.{{.GoFieldName}} },
                                    },
                                ))
                            }
                        {{end}}
                    {{end}}
                }
            case CondTypeLike: // like, string
                if cond.Like != nil {
                    {{range .Fields}}
                        {{$ok := 0 }}

                        {{if eq .GoType "string" }}
                            {{$ok = 1}}
                        {{end}}

                        {{if gt $ok 0 }}
                            if cond.Like.{{.GoFieldName}} != nil {
                                r = r.Clauses(clause.Like{
                                    Column: field.FieldName{{.GoFieldName}}(),
                                    Value: "%" + godb.PointString(cond.Like.{{.GoFieldName}}) + "%",
                                })
                            }
                        {{end}}
                    {{end}}
                }
            }
        }



    }

    if len(customFilters) > 0 {
        for _, filter := range customFilters {
            if filter == nil {
                continue
            }

            r, err = filter(r, field)
            if err != nil {
                return r, err
            }
        }
    }

    return r, err
}

// {{.GoStructName}}FilterCond cond
type {{.GoStructName}}FilterCond struct {
	Type      CondType
	Number    *{{.GoStructName}}CondNumber
	Between   *{{.GoStructName}}CondBetween
	Container *{{.GoStructName}}CondContainer
    Like	  *{{.GoStructName}}Like
}


type {{.GoStructName}}CondNumber struct {

     {{range .Fields}}

        {{if eq .GoType "int" }}
            {{.GoFieldName}} *int // {{.GoFieldName}}, {{.Comment}}
        {{end}}

        {{if eq .GoType "uint" }}
            {{.GoFieldName}} *uint // {{.GoFieldName}}, {{.Comment}}
        {{end}}

        {{if eq .GoType "float" }}
            {{.GoFieldName}} *float64 // {{.GoFieldName}}, {{.Comment}}
        {{end}}

    {{end}}
}

type {{.GoStructName}}CondBetween struct {

     {{range .Fields}}

        {{if eq .GoType "int" }}
            {{.GoFieldName}}LessVal *int // {{.GoFieldName}} less value, {{.Comment}}
            {{.GoFieldName}}MoreVal *int // {{.GoFieldName}} more value, {{.Comment}}
        {{end}}

        {{if eq .GoType "uint" }}
            {{.GoFieldName}}LessVal *uint // {{.GoFieldName}} less value, {{.Comment}}
            {{.GoFieldName}}MoreVal *uint // {{.GoFieldName}} more value, {{.Comment}}
        {{end}}

        {{if eq .GoType "float" }}
            {{.GoFieldName}}LessVal *float64 // {{.GoFieldName}} less value, {{.Comment}}
            {{.GoFieldName}}MoreVal *float64 // {{.GoFieldName}} more value, {{.Comment}}
        {{end}}

    {{end}}
}


type {{.GoStructName}}CondContainer struct {

     {{range .Fields}}
        {{if eq .GoType "bool" }}
            {{.GoFieldName}} []bool // {{.GoFieldName}} slice {{.Comment}}
        {{end}}

        {{if eq .GoType "int" }}
            {{.GoFieldName}} []int // {{.GoFieldName}} slice {{.Comment}}
        {{end}}

        {{if eq .GoType "uint" }}
            {{.GoFieldName}} []uint // {{.GoFieldName}} slice, {{.Comment}}
        {{end}}

        {{if eq .GoType "float" }}
            {{.GoFieldName}} []float64 // {{.GoFieldName}} slice, {{.Comment}}
        {{end}}

        {{if eq .GoType "string" }}
            {{.GoFieldName}} []string // {{.GoFieldName}} slice, {{.Comment}}
        {{end}}

        {{if eq .GoType "bytes" }}
            {{.GoFieldName}} [][]bytes // {{.GoFieldName}} slice, {{.Comment}}
        {{end}}

    {{end}}
}


type {{.GoStructName}}Like struct {

     {{range .Fields}}

        {{if eq .GoType "string" }}
            {{.GoFieldName}} *string // {{.GoFieldName}}, {{.Comment}}
        {{end}}

    {{end}}
}

