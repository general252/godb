package model

// 此文件是更加GoGoEngine自动生成

import (
    "context"
    "fmt"
    "log"
    "os"
    "time"

    "github.com/pkg/errors"
    "gorm.io/driver/mysql"
    "gorm.io/gorm"
    "gorm.io/gorm/logger"
)

// DefaultEngine 默认数据链接
var DefaultEngine DBEngine = NewDBEngine()

type DBEngine interface {
    Init(p *InitParam) error
    Ping(duration time.Duration) error
    GetDB() *gorm.DB
}

func NewDBEngine() *DBEngineImp {
    return &DBEngineImp{}
}

type DBEngineImp struct {
    db *gorm.DB
}

type InitParam struct {
    Host     string
    Port     int
    DBName   string
    Username string
    Password string
    ShowSQL  bool
}

// Init 初始化gorm, 官方文档 https://gorm.io/zh_CN/docs
func (c *DBEngineImp) Init(p *InitParam) error {
    if p == nil {
        return fmt.Errorf("error param")
    }
    if err := c.mMySQLCreateDataBase(p); err != nil {
        return err
    }

    dsn := fmt.Sprintf("%v:%v@tcp(%v:%v)/%v?charset=utf8mb4&parseTime=True",
        p.Username, p.Password, p.Host, p.Port, p.DBName)

    db, err := gorm.Open(mysql.New(mysql.Config{
        DSN:                       dsn,   // DSN data source name
        DefaultStringSize:         256,   // string 类型字段的默认长度
        DisableDatetimePrecision:  true,  // 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持
        DontSupportRenameIndex:    true,  // 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引
        DontSupportRenameColumn:   true,  // 用 change 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列
        SkipInitializeWithVersion: false, // 根据当前 MySQL 版本自动配置
    }), &gorm.Config{
        SkipDefaultTransaction: true, // 禁用默认事务, 为了确保数据一致性，GORM 会在事务里执行写入操作（创建、更新、删除）。如果没有这方面的要求，您可以在初始化时禁用它，这将获得大约 30%+ 性能提升
    })

    if err != nil {
        return errors.WithMessage(err, "gorm.Open fail")
    }

    {
        // db.Logger = db.Logger.LogMode(logger.Info) // 设置日志打印级别
        // or
        db.Logger = logger.New(log.New(os.Stderr, "", log.LstdFlags), logger.Config{
            SlowThreshold: time.Second,
            LogLevel:      logger.Warn,
            Colorful:      false,
        })
    }

    if p.ShowSQL {
        db.Logger = db.Logger.LogMode(logger.Info)
    }

    sqlDB, err := db.DB()
    if err != nil {
        return errors.WithMessage(err, "db.DB() fail")
    }

    sqlDB.SetMaxIdleConns(10)
    sqlDB.SetMaxOpenConns(100)
    sqlDB.SetConnMaxIdleTime(time.Hour)

    if err := c.ping(db, time.Second*10); err != nil {
        return err
    }

    err = db.AutoMigrate(GetModelBeans()...)
    if err != nil {
        return errors.WithMessageWithStack(err)
    }

    c.db = db

    return nil
}

func (c *DBEngineImp) Ping(duration time.Duration) error {
    return c.ping(c.db, duration)
}

func (c *DBEngineImp) GetDB() *gorm.DB {
    return c.db
}

func (c *DBEngineImp) ping(db *gorm.DB, duration time.Duration) error {
    sqlDB, err := db.DB()
    if err != nil {
        return errors.WithStack(err)
    }

    ctx, cancel := context.WithTimeout(context.Background(), duration)
    defer cancel()
    if err := sqlDB.PingContext(ctx); err != nil {
        return errors.WithStack(err)
    }

    return nil
}

// mMySQLCreateDataBase 创建数据库
func (c *DBEngineImp) mMySQLCreateDataBase(p *InitParam) error {
    dsn := fmt.Sprintf("%v:%v@tcp(%v:%v)/information_schema?charset=utf8mb4&parseTime=True",
        p.Username, p.Password, p.Host, p.Port)

    db, err := gorm.Open(mysql.New(mysql.Config{
        DSN:                       dsn,   // DSN data source name
        DefaultStringSize:         256,   // string 类型字段的默认长度
        DisableDatetimePrecision:  true,  // 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持
        DontSupportRenameIndex:    true,  // 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引
        DontSupportRenameColumn:   true,  // 用 change 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列
        SkipInitializeWithVersion: false, // 根据当前 MySQL 版本自动配置
    }), &gorm.Config{})
    if err != nil {
        return err
    }

    dbName := p.DBName

    rows, err := db.Raw("SHOW databases;").Rows()
    if err != nil {
        return err
    }
    defer func() {
        _ = rows.Close()
    }()

    var find = false
    for rows.Next() {
        var name string
        _ = rows.Scan(&name)
        if name == dbName {
            find = true
        }

        //log.Printf("database name: %v", name)
    }
    if find {
        return nil
    }

    if r := db.Exec(fmt.Sprintf("CREATE DATABASE %v;", dbName)); r.Error != nil {
        return r.Error
    }

    return nil
}
